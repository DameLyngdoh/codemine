package com.damelyngdoh.codemine.factorypollution;

import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Scanner;

/**
 * This problem requires the use of a max-heap. In Java, this 
 * implementation is available through the use of a PriorityQueue. 
 * The PriorityQueue requires the reversal of order as the default 
 * order adheres to a min-heap implementation.
 */
public class FactoryPollution {
    
    public static void main(String[] args) {
        
        int n;
        int[] pollution;

        try(Scanner scan = new Scanner(System.in)) {
            n = scan.nextInt();
            pollution = new int[n];
            for(int i = 0; i < n; i++) {
                pollution[i] = scan.nextInt();
            }
        }
        System.out.println(filterCount(pollution));
    }

    /**
     * Calculates the minimum required number of filters.
     * @param pollution Array of pollution generated by each factory.
     * @return Minimum required number of filters.
     */
    public static int filterCount(int[] pollution) {
        if(pollution == null) {
            return -1;
        }

        int filterCount = 0;
        double maxPollution = 0;
        double currentPollution = 0;
        PriorityQueue<Double> queue = new PriorityQueue<>(pollution.length, Comparator.reverseOrder());

        // Calculating maximum allowed pollution
        for(Integer p : pollution) {
            currentPollution += (double)p;
            queue.add((double)p);
        }

        // Required pollution level
        maxPollution = currentPollution / 2;
        
        while(currentPollution > maxPollution) {
            // Taking the factory with highest pollution
            double p = queue.poll();
            
            // Adding filter to the factory
            // Halves its pollution
            currentPollution -= p/2;

            // Adding remaining half pollution to queue again
            queue.add(p/2);

            // Updating filter count
            filterCount++;
        }

        return filterCount;
    }
}
